"""
Django settings for recyclable_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # import this library top of the settings.py file
import os



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e7_-$un7i$04)3l!f7uca1jv^$e_u&di^jz6o6h7*=2sd#5&uj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'rest_framework',
    'rest_framework_simplejwt',
    'cloudinary',
    'cloudinary_storage',
    'djoser',
    "corsheaders",
    "drf_spectacular",
        'channels',



    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # ðŸ”¥ add this at the very top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'recyclable_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'recyclable_project.wsgi.application'
ASGI_APPLICATION = 'recyclable_project.asgi.application'  # Replace with your project name




# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'app.User'
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
         'rest_framework.permissions.AllowAny', 
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
 
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME_LATE_USER': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME_LATE_USER': timedelta(days=30),
}


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'



# Your Cloudinary API credentials (you'll get these from https://cloudinary.com/console)


# settings.py
import cloudinary
import cloudinary.uploader
import cloudinary.api	
cloudinary.config( 
  	cloud_name = "dltgnmg1v",
  	api_key = "738298728812741",
  	api_secret = "qDSbOPW-RIv3ujRIvPhh3LqBqgc"
)

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False  # Set to True if you use SSL
# EMAIL_HOST_USER = 'ojugbelelateef2006@gmail.com'
# EMAIL_HOST_PASSWORD = 'yshhvvigaryqlabg'
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# ADMIN_NOTIFICATION_EMAIL = 'ojugbelelateef2006@gmail.com'



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # e.g., 'smtp.gmail.com' for Gmail
EMAIL_PORT = 587  # e.g., 587 for TLS, 465 for SSL
EMAIL_USE_TLS = True  # Set to False if you use SSL
EMAIL_USE_SSL = False  # Set to True if you use SSL
EMAIL_HOST_USER = 'ojugbelelateef2006@gmail.com'
EMAIL_HOST_PASSWORD = 'yshhvvigaryqlabg'
DEFAULT_FROM_EMAIL = 'ojugbelelateef2006@gmail.com'  # Default "from" email
ADMIN_NOTIFICATION_EMAIL = 'ojugbelelateef2006@gmail.com'  # Website owner's email



REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # other configurations
}


# CORS_ORIGIN_WHITELIST = [
#     'http://localhost:3000',
#     'http://localhost:5173',
#     "http://127.0.0.1:5173",
#     "http://192.168.122.39:8000",
#     "http://192.168.118.101"
    
    

# ]

CORS_ALLOW_ALL_ORIGINS = True


SPECTACULAR_SETTINGS = {
"TITLE": "A recyclable API Project",
"DESCRIPTION":  """
A recyclable API Project
  Connect to:  
        `ws://yourdomain.com/ws/notifications/?token=<JWT_TOKEN>`

        - Real-time notifications
        - Requires valid JWT token as a query parameter
""",
"VERSION": "1.0.0",




# OTHER SETTINGS
}


# CSRF_TRUSTED_ORIGINS = [
#     'http://192.168.122.39',  # Add your frontend's address here
    
# ]

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'app': {  # Replace 'yourapp' with your actual app name
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


# CORS_ALLOWED_ORIGINS = [
#     "http://192.168.118.101:19006",  # Expo Go on LAN
# ]

CSRF_TRUSTED_ORIGINS = [
    "http://192.168.118.101",
]


import os

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # This can be any name like 'static_root', but 'staticfiles' is common
SECURE_SSL_REDIRECT = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

